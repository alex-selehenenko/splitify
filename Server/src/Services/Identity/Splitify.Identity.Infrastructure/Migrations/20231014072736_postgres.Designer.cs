// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Splitify.Identity.Infrastructure;

#nullable disable

namespace Splitify.Identity.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231014072736_postgres")]
    partial class postgres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Splitify.Identity.Domain.UserAggregate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Splitify.Identity.Domain.UserAggregate", b =>
                {
                    b.OwnsOne("Splitify.Identity.Domain.ResetPasswordToken", "ResetPasswordToken", b1 =>
                        {
                            b1.Property<string>("UserAggregateId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserAggregateId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.OwnsOne("Splitify.Identity.Domain.UserPassword", "Password", b1 =>
                        {
                            b1.Property<string>("UserAggregateId")
                                .HasColumnType("text");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.HasKey("UserAggregateId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.OwnsOne("Splitify.Identity.Domain.VerificationCode", "VerificationCode", b1 =>
                        {
                            b1.Property<string>("UserAggregateId")
                                .HasColumnType("text");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("UserAggregateId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("ResetPasswordToken")
                        .IsRequired();

                    b.Navigation("VerificationCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
